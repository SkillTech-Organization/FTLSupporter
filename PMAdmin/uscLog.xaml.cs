using Microsoft.WindowsAzure.Storage.Table;
using PMAdmin.Common;
using PMAdmin.Model;
using PMap.Common;
using PMap.Common.Azure;
using PMap.Licence;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PMAdmin
{
    /// <summary>
    /// Interaction logic for uscLog.xaml
    /// </summary>
    public partial class uscLog : UserControl
    {
        private mdlLog m_dataContext = new mdlLog();
        public uscLog()
        {
            InitializeComponent();
            this.DataContext = m_dataContext;
            m_dataContext.PMapLicenceList = AzureTableStore.Instance.RetrieveList<PMapLicence>();
            m_dataContext.SelLicence = m_dataContext.PMapLicenceList.FirstOrDefault();
            m_dataContext.DateS = DateTime.Now.Date;
            m_dataContext.DateE = DateTime.Now.Date;
            m_dataContext.SelType = "";
        }

        private void dgrLog_AutoGeneratedColumns(object sender, EventArgs e)
        {
            PMAUtils.SetDataGridColums<PMapLog>((DataGrid)sender);

        }

        private void dgrLog_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            PropertyDescriptor pd = (PropertyDescriptor)e.PropertyDescriptor;
            if (pd.PropertyType == typeof(System.Windows.Media.ImageSource))
            {
                e.Column = PMAUtils.SetDataGridImageColums(pd);
            }

        }


        private void getLogList()
        {
            if (m_dataContext.SelLicence == null)
                return;

            using (new WaitCursor())
            {
                string fltDateS = TableQuery.GenerateFilterConditionForDate("PMapTimestamp", QueryComparisons.GreaterThanOrEqual, m_dataContext.DateS);
                string fltDateE = TableQuery.GenerateFilterConditionForDate("PMapTimestamp", QueryComparisons.LessThanOrEqual, m_dataContext.DateE.AddDays(1).AddSeconds(-1));
                string fltINSTANCE = TableQuery.GenerateFilterCondition("AppInstance", QueryComparisons.Equal, m_dataContext.SelLicence.AppInstance);
                string fltType = TableQuery.GenerateFilterCondition("Type", QueryComparisons.Equal, m_dataContext.SelType);

//                m_dataContext.PMapLogList = AzureTableStore.Instance.RetrieveList<PMapLog>(fltDateS + " and " + fltDateE + " and " + fltINSTANCE + (m_dataContext.SelType == "" ? "" : "and " + fltType));
                m_dataContext.PMapLogList = AzureTableStore.Instance.RetrieveList<PMapLog>(fltINSTANCE);

            }
        }

        private void cmbAppInstance_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            getLogList();
        }

        private void cmbType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            getLogList();
        }

        private void DateS_LostFocus(object sender, RoutedEventArgs e)
        {
            getLogList();
        }

        private void DateE_LostFocus(object sender, RoutedEventArgs e)
        {
            getLogList();
        }

    }
}

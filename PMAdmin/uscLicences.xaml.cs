using Microsoft.Win32;
using PMAdmin.Common;
using PMAdmin.Model;
using PMap.Common;
using PMap.Common.Azure;
using PMap.Licence;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Xml;
using System.Xml.Serialization;

namespace PMAdmin
{
    /// <summary>
    /// Interaction logic for uscLicences.xaml
    /// </summary>
    public partial class uscLicences : UserControl
    {
        private mdlLicences m_dataContext = new mdlLicences();
        public uscLicences()
        {
            InitializeComponent();
            this.DataContext = m_dataContext;
            refreshFromDB();

        }


        private void refreshFromDB()
        {
            using (new WaitCursor())
            {
                m_dataContext.PMapLicenceList = AzureTableStore.Instance.RetrieveObservableList<PMapLicence>("", "AppInstance");
                m_dataContext.SelectedItem = null;
                m_dataContext.EditedItem = null;
            }
        }

        private void dgrLicences_AutoGeneratedColumns(object sender, EventArgs e)
        {
            PMAUtils.SetDataGridColums<PMapLicence>((DataGrid)sender);

        }

        private void dgrLicences_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            //Image mező generálása
            PropertyDescriptor pd = (PropertyDescriptor)e.PropertyDescriptor;
            if (pd.PropertyType == typeof(System.Windows.Media.ImageSource))
            {
                e.Column = PMAUtils.SetDataGridImageColums(pd);
            }


        }

        private void btnNew_Click(object sender, RoutedEventArgs e)
        {
            m_dataContext.EditedItem = new PMapLicence();
            txtAppInstance.Focus();
        }

        private void btnReset_Click(object sender, RoutedEventArgs e)
        {
            selectItem();
        }

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {

            PMapLicence curr = m_dataContext.EditedItem;
            List<ObjectValidator.ValidationError> err = ObjectValidator.ValidateObject(curr);
            if (err.Count > 0)
            {
                dlgValidationErrors d = new dlgValidationErrors(err, "Licence felvitel");
                d.ShowDialog();

            }
            else
            {

                AzureTableObjBase.enObjectState oriState = curr.State;
                writeItem(curr);
                if (oriState == AzureTableObjBase.enObjectState.New)
                    m_dataContext.AddNewItem(curr);
                else
                    m_dataContext.ModifyItem(curr);

                m_dataContext.SelectedItem = curr;
                m_dataContext.EditedItem = curr.ShallowCopy();
                dgrLicences.ScrollIntoView(curr);
                dgrLicences.Focus();
            }
        }

        private void btnGen_Click(object sender, RoutedEventArgs e)
        {
            /*
            if (!UI.Confirm("ID file generálás ?"))
                return;
*/
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "ID file (*.id)|*.id";
            saveFileDialog.FileName = "Pmap.id";
            if (saveFileDialog.ShowDialog() == true)
            {
                PMapLicence curr = m_dataContext.EditedItem;

                PMapID pmi = new PMapID();
                pmi.ID = curr.ID;
                pmi.AppInstance = curr.AppInstance;

                pmi.AzureAccountName = PMAdmin.Properties.Settings.Default.AzureAccount;
                pmi.AzureAccountKey = PMAdmin.Properties.Settings.Default.AzureKey;
                string idContent = Util.ObjToXML(pmi);
                // vector (IV).

                //
                byte[] encrypted;
                using (Aes myAes = Aes.Create())
                {
                    encrypted = AES.EncryptStringToBytes_Aes(idContent, Encoding.Default.GetBytes(ChkLic.pw), Encoding.Default.GetBytes(ChkLic.iv));
                    Util.ByteArrayToFile(saveFileDialog.FileName, encrypted);
                    string d = AES.DecryptStringFromBytes_Aes(encrypted, Encoding.Default.GetBytes(ChkLic.pw), Encoding.Default.GetBytes(ChkLic.iv));
                    UI.Message("ID fájl generálás megtörtént:" + saveFileDialog.FileName);
                }
            }
        }

        private void btnDel_Click(object sender, RoutedEventArgs e)
        {

            if (!UI.Confirm("Törölhető a tétel?"))
                return;
            //Elem kiválasztása
            selectItem();

            //Azure művelet
            PMapLicence curr = m_dataContext.EditedItem;
            curr.State = PMapLicence.enObjectState.Inactive;
            writeItem(curr);

            //Model művelet
            m_dataContext.DeleteItem(curr);
            m_dataContext.SelectedItem = null;
            m_dataContext.EditedItem = null;
            dgrLicences.Focus();
        }

        private void dgrLicences_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            selectItem();
        }


        private void selectItem()
        {
            if(m_dataContext.SelectedItem != null)
            {
                m_dataContext.EditedItem = m_dataContext.SelectedItem.ShallowCopy();

            }
            else
            {
                m_dataContext.EditedItem = null;
                dgrLicences.SelectedItem = null;
                dgrLicences.CurrentItem = null;
            }
            /*
            PMapLicence sel = (PMapLicence)dgrLicences.SelectedItem;
            if (sel != null && dgrLicences.CurrentItem == dgrLicences.SelectedItem) //dgrLicences.CurrentItem != dgrLicences.SelectedItem esetén nincs a griden fókusz
                m_dataContext.EditedItem = sel.ShallowCopy();
            else
            {
                m_dataContext.EditedItem = new PMapLicence();
                dgrLicences.SelectedItem = null;
                dgrLicences.CurrentItem = null;
            }
            */
        }


        private void writeItem(PMapLicence p_item)
        {
            switch (p_item.State)
            {
                case AzureTableObjBase.enObjectState.New:
                    AzureTableStore.Instance.Insert(p_item, Environment.MachineName);
                    break;
                case AzureTableObjBase.enObjectState.Stored:

                    break;
                case AzureTableObjBase.enObjectState.Modified:
                    AzureTableStore.Instance.Modify(p_item, Environment.MachineName);

                    break;
                case AzureTableObjBase.enObjectState.Inactive:
                    AzureTableStore.Instance.Delete(p_item);
                    break;
                default:
                    break;
            }
        }
    }
}
